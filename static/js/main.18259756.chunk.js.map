{"version":3,"sources":["components/W12MHeader/W12MHeader.tsx","components/ErrorMessage/ErrorMessage.tsx","components/SpeciesName/SpeciesName.tsx","components/PlanetName/PlanetName.tsx","components/NumberOfBeings/NumberOfBeings.tsx","components/WhatIsTwoPlusTwo/WhatIsTwoPlusTwo.tsx","components/ReasonForSparing/ReasonForSparing.tsx","components/W12MForm/W12MForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["W12MHeader","audio","Audio","id","onClick","play","pause","ErrorMessage","errorMessage","htmlFor","className","SpeciesName","speciesName","onChangeSpeciesName","useState","setErrorMessage","type","placeholder","value","onChange","e","test","validate","target","PlanetName","planetName","onChangePlanetName","NumberOfBeings","numberOfBeings","onChangeNumberOfBeings","WhatIsTwoPlusTwo","whatIsTwoPlusTwo","onChangeWhatIsTwoPlusTwo","ReasonForSparing","reasonForSparing","onChangeReasonForSparing","W12MForm","saveData","setSpeciesName","setPlanetName","setNumberOfBeings","answer","setAnswer","setReasonForSparing","formData","setFormData","isSubmitted","onSubmit","event","preventDefault","alert","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18259756.chunk.js","sourcesContent":["const W12MHeader: React.FC = () => {\n\tlet audio = new Audio(\"./vogon.m4a\")\n\n\tconst start = () => {\n\t  audio.play()\n\t}\n\n\tconst pause = () => {\n\t  audio.pause()\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<button id=\"play\" onClick={start}>Play</button>\n\t\t\t<button id=\"pause\" onClick={pause}>Pause</button>\n\t\t<ul>\n\t\t\t<li>Each species may only submit ONE W-12-M form.</li>\n\t\t\t<li>\n\t\t\t\tAny mistakes will guarantee rejection and your planet will NOT be\n\t\t\t\tspared.\n\t\t\t</li>\n\t\t</ul>\n\t\t</div>\n\t);\n};\n\nexport default W12MHeader;\n","interface ErrorMessageProps { \n\terrorMessage: string;\n}\n\nconst ErrorMessage: React.FC<ErrorMessageProps> = ({ errorMessage }) =>  {\n\n  return (\n    <>\n        <label htmlFor='errorMessage' className='error'>{ errorMessage }</label>\n    </> );\n};\n\nexport default ErrorMessage;","import { useState } from 'react';\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\n\ninterface SpeciesNameProps { \n\tspeciesName: string;\n\tonChangeSpeciesName: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst SpeciesName: React.FC<SpeciesNameProps> = ({ speciesName, onChangeSpeciesName }) =>  {\n\n  const [ errorMessage, setErrorMessage ] = useState<string | undefined>('');\n\n  const validate : (value : string) => string | undefined = (value) => {\n    const regex = /^[a-zA-Z]{3,23}$/;\n    if (regex.test(value) === false) {\n      return \"Error: Species Name must be between 3 and 23 characters and can only contain letters.\";\n    }\n  }\n\n  return (\n    <>\n        <label htmlFor='speciesName'>Species Name</label>\n        <input \n              id='speciesName' \n              type='text' \n              placeholder=\"Enter a species name\" \n              value={speciesName} \n              onChange={(e) => {\n                const errorMessage = validate(e.target.value);\n                setErrorMessage(errorMessage);\n                onChangeSpeciesName(e);\n                }\n              } \n            />\n            <ErrorMessage errorMessage={errorMessage}/>\n    </> );\n};\n\nexport default SpeciesName;","import { useState } from 'react';\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\n\ninterface PlanetNameProps { \n\tplanetName: string;\n\tonChangePlanetName: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst PlanetName: React.FC<PlanetNameProps> = ({ planetName, onChangePlanetName }) =>  {\n\n  const [ errorMessage, setErrorMessage ] = useState<string | undefined>('');\n\n  const validate : (value : string) => string | undefined = (value) => {\n    const regex = /^[a-zA-Z0-9]{2,49}$/;\n    if (regex.test(value) === false) {\n      return \"Error: Planet Name must be between 2 and 49 characters and can only contain letters and numbers.\";\n    }\n  }\n\n  return (\n    <>\n        <label htmlFor='planetName'>Planet Name</label>\n        <input \n              id='planetName' \n              type='text' \n              placeholder=\"Enter a planet name\" \n              value={planetName} \n              onChange={(e) => {\n                const errorMessage = validate(e.target.value);\n                setErrorMessage(errorMessage);\n                onChangePlanetName(e);\n                }\n              } \n            />\n            <ErrorMessage errorMessage={errorMessage}/>\n    </> );\n};\n\nexport default PlanetName;","import { useState } from 'react';\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\n\ninterface NumberOfBeingsProps { \n\tnumberOfBeings: string;\n\tonChangeNumberOfBeings: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst NumberOfBeings: React.FC<NumberOfBeingsProps> = ({ numberOfBeings, onChangeNumberOfBeings }) =>  {\n\n  const [ errorMessage, setErrorMessage ] = useState<string | undefined>('');\n\n  const validate : (value : string) => string | undefined = (value) => {\n    const regex = /^[1-9]{1}[0-9]{9,}$/;\n    if (regex.test(value) === false) {\n      return \"Error: Number of Beings must be at least 1000000000 (one billion).\";\n    }\n  }\n\n  return (\n    <>\n        <label htmlFor='numberOfBeings'>Number of Beings</label>\n        <input \n              id='numberOfBeings' \n              type='text' \n              placeholder=\"Enter number of beings\" \n              value={numberOfBeings} \n              onChange={(e) => {\n                const errorMessage = validate(e.target.value);\n                setErrorMessage(errorMessage);\n                onChangeNumberOfBeings(e);\n                }\n              } \n            />\n            <ErrorMessage errorMessage={errorMessage}/>\n    </> );\n};\n\nexport default NumberOfBeings;","import { useState } from 'react';\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\n\ninterface WhatIsTwoPlusTwoProps { \n\twhatIsTwoPlusTwo: string;\n\tonChangeWhatIsTwoPlusTwo: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n}\n\nconst WhatIsTwoPlusTwo: React.FC<WhatIsTwoPlusTwoProps> = ({ whatIsTwoPlusTwo, onChangeWhatIsTwoPlusTwo }) =>  {\n\n  const [ errorMessage, setErrorMessage ] = useState<string | undefined>('');\n\n  const validate : (value : string) => string | undefined = (value) => {\n    if (value === 'Not 4') {\n      return \"Error: 2 + 2 is 4.\";\n    }\n  }\n\n  return (\n    <>\n        <label htmlFor='whatIsTwoPlusTwo'>What is 2 + 2?</label>\n        <select \n                data-testid=\"maths-question\" \n                value={whatIsTwoPlusTwo}               \n                onChange={(e) => {\n                const errorMessage = validate(e.target.value);\n                setErrorMessage(errorMessage);\n                onChangeWhatIsTwoPlusTwo(e);\n                }}>\n        <option id=\"4\" value=\"4\">4</option>\n        <option id=\"Not 4\" value=\"Not 4\">Not 4</option>\n        </select>\n        <ErrorMessage errorMessage={errorMessage}/>\n    </> );\n};\n\nexport default WhatIsTwoPlusTwo;","import { useState } from 'react';\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\n\ninterface ReasonForSparingProps { \n\treasonForSparing: string;\n\tonChangeReasonForSparing: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n}\n\nconst ReasonForSparing: React.FC<ReasonForSparingProps> = ({ reasonForSparing, onChangeReasonForSparing }) =>  {\n\n  const [ errorMessage, setErrorMessage ] = useState<string | undefined>('');\n\n  const validate : (value : string) => string | undefined = (value) => {\n    const regex = /^.{17,153}$/;\n    if (regex.test(value) === false) {\n      return \"Error: Reason for Sparing must be between 17 and 153 characters.\";\n    }\n  }\n\n  return (\n    <div className=\"container\">\n        <label>\n        Reason for Sparing\n        <textarea\n          value={reasonForSparing}\n          onChange={(e) => {\n            const errorMessage = validate(e.target.value);\n            setErrorMessage(errorMessage);\n            onChangeReasonForSparing(e);\n            }\n          } \n          placeholder=\"Enter a reason for sparing\"\n          className=\"input\"\n        />\n        </label>\n        <ErrorMessage errorMessage={errorMessage}/>\n    </div>\n  );\n};\n\nexport default ReasonForSparing;","import { useState } from 'react';\nimport W12MHeader from '../W12MHeader/W12MHeader'\nimport SpeciesName from '../SpeciesName/SpeciesName';\nimport PlanetName from '../PlanetName/PlanetName';\nimport NumberOfBeings from '../NumberOfBeings/NumberOfBeings';\nimport WhatIsTwoPlusTwo from '../WhatIsTwoPlusTwo/WhatIsTwoPlusTwo';\nimport ReasonForSparing from '../ReasonForSparing/ReasonForSparing';\n\ninterface formProps {\n\tsaveData?: (data: any) => void;\n}\n\nconst W12MForm: React.FC<formProps> = ({ saveData }) => {\n\tconst [speciesName, setSpeciesName] = useState<string>('');\n\tconst [planetName, setPlanetName] = useState<string>('');\n\tconst [numberOfBeings, setNumberOfBeings] = useState<string>('');\n\tconst [answer, setAnswer] = useState<string>('4');\n\tconst [reasonForSparing, setReasonForSparing] = useState<string>('');\n\tconst [formData, setFormData] = useState<string>('');\n\tlet isSubmitted : boolean = false;\n\n\tconst submitForm = (event: React.FormEvent<HTMLFormElement>) => {\n\t\tevent.preventDefault();\n\t\talert(\"Form submitted - may your planet be spared!\");\n\t\tsetFormData(`Your answers were: ${speciesName}, ${planetName}, ${numberOfBeings}, ${answer}, ${reasonForSparing}. Your planet will not be spared! Resistance is useless!`);\n\t\tsaveData({\n\t\t\tspeciesName,\n\t\t\tplanetName,\n\t\t\tnumberOfBeings,\n\t\t\tanswer,\n\t\t\treasonForSparing\n\t\t});\n\t\tisSubmitted = true;\n\t\tconsole.log(`This form has been submitted: ${isSubmitted}`);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t<W12MHeader />\n\t\t<form className='w12MForm' data-testid=\"form\" onSubmit={submitForm}>\n\t\t\t<SpeciesName speciesName={speciesName} onChangeSpeciesName={(event : any) => setSpeciesName(event.target.value)}/>\n\t\t\t<PlanetName planetName={planetName} onChangePlanetName={(event : any) => setPlanetName(event.target.value)}/>\n\t\t\t<NumberOfBeings numberOfBeings={numberOfBeings} onChangeNumberOfBeings={(event : any) => setNumberOfBeings(event.target.value)}/>\n\t\t\t<WhatIsTwoPlusTwo whatIsTwoPlusTwo={answer} onChangeWhatIsTwoPlusTwo={(event : any) => setAnswer(event.target.value)}/>\n\t\t\t<ReasonForSparing reasonForSparing={reasonForSparing} onChangeReasonForSparing={(event : any) => setReasonForSparing(event.target.value)}/>\n\t\t\t<button id=\"submit\" type=\"submit\" data-testid=\"submit\" className=\"btn\">Submit</button>\n\t\t\t<p>{formData}</p>\n\t\t</form>\n\t\t<h5>Alien Corp © 2022 All Rights Reserved</h5>\n\t\t</div>\n\t);\n};\n\nexport default W12MForm;\n","import './App.css';\nimport W12MForm from './components/W12MForm/W12MForm';\n\nfunction App() {\n\n\treturn (\n\t\t<>\n\t\t\t<h1>W-12-M :- APPLICATION TO SPARE PLANET FROM DESTRUCTION</h1>\n\t\t\t<W12MForm />\n\t\t</>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(\n\t\t\t({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\t\tgetCLS(onPerfEntry);\n\t\t\t\tgetFID(onPerfEntry);\n\t\t\t\tgetFCP(onPerfEntry);\n\t\t\t\tgetLCP(onPerfEntry);\n\t\t\t\tgetTTFB(onPerfEntry);\n\t\t\t}\n\t\t);\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}